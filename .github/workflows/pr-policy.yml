name: PR Policy
on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled, ready_for_review, reopened]
  pull_request_review:
    types: [submitted, dismissed]

permissions:
  contents: read
  pull-requests: read

jobs:
  gate:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR naming, labels and approvals
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request || (await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            })).data;

            const head = pr.head.ref;
            if (!/^(feature|fix|chore)\//.test(head)) {
              core.setFailed(`La rama debe empezar por feature/, fix/ o chore/ (actual: ${head})`);
              return;
            }

            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });
            if (!labels || labels.length < 1) {
              core.setFailed("Añade al menos 1 label al PR.");
              return;
            }

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            if (!reviews.some(r => r.state === "APPROVED")) {
              core.setFailed("Se requiere al menos 1 aprobación.");
              return;
            }

            core.info("✅ PR cumple política mínima.")
